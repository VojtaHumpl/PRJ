//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:\Google Drive\Skola\VS\TUL\Projekt\DataVisualizer\DataVisualizer\ExpressionEvaluation\Lang.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class LangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WORD=1, WHITESPACE=2, AVG=3, LBR=4, RBR=5, ADD=6, SUB=7, MUL=8, DIV=9, 
		NUMBER=10, COMMA=11, CELL=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"A", "V", "G", "LOWERCASE", "UPPERCASE", "WORD", "WHITESPACE", "AVG", 
		"LBR", "RBR", "ADD", "SUB", "MUL", "DIV", "NUMBER", "COMMA", "CELL"
	};


	public LangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", null, 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WORD", "WHITESPACE", "AVG", "LBR", "RBR", "ADD", "SUB", "MUL", 
		"DIV", "NUMBER", "COMMA", "CELL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', 'Y', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x6', '\a', '\x32', '\n', '\a', '\r', '\a', '\xE', '\a', '\x33', '\x3', 
		'\b', '\x6', '\b', '\x37', '\n', '\b', '\r', '\b', '\xE', '\b', '\x38', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x5', '\x10', 'N', '\n', '\x10', 
		'\x3', '\x10', '\x6', '\x10', 'Q', '\n', '\x10', '\r', '\x10', '\xE', 
		'\x10', 'R', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x2', '\x2', '\x13', '\x3', '\x2', '\x5', '\x2', '\a', 
		'\x2', '\t', '\x2', '\v', '\x2', '\r', '\x3', '\xF', '\x4', '\x11', '\x5', 
		'\x13', '\x6', '\x15', '\a', '\x17', '\b', '\x19', '\t', '\x1B', '\n', 
		'\x1D', '\v', '\x1F', '\f', '!', '\r', '#', '\xE', '\x3', '\x2', '\t', 
		'\x4', '\x2', '\x43', '\x43', '\x63', '\x63', '\x4', '\x2', 'X', 'X', 
		'x', 'x', '\x4', '\x2', 'I', 'I', 'i', 'i', '\x3', '\x2', '\x63', '|', 
		'\x3', '\x2', '\x43', '\\', '\x4', '\x2', '\v', '\v', '\"', '\"', '\x3', 
		'\x2', '\x32', ';', '\x2', 'X', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x3', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\'', '\x3', '\x2', '\x2', '\x2', '\a', ')', '\x3', '\x2', '\x2', 
		'\x2', '\t', '+', '\x3', '\x2', '\x2', '\x2', '\v', '-', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x31', '\x3', '\x2', '\x2', '\x2', '\xF', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '<', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x15', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x44', '\x3', '\x2', '\x2', '\x2', '\x19', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', 'H', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x1F', 'M', '\x3', '\x2', '\x2', '\x2', 
		'!', 'T', '\x3', '\x2', '\x2', '\x2', '#', 'V', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\t', '\x2', '\x2', '\x2', '&', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\t', '\x3', '\x2', '\x2', '(', '\x6', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\t', '\x4', '\x2', '\x2', '*', '\b', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\t', '\x5', '\x2', '\x2', ',', '\n', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\t', '\x6', '\x2', '\x2', '.', '\f', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x32', '\x5', '\t', '\x5', '\x2', '\x30', '\x32', 
		'\x5', '\v', '\x6', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\xE', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x37', '\t', '\a', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x3', '\x2', '\x2', '\x2', ':', ';', '\b', '\b', '\x2', '\x2', ';', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x5', '\x3', '\x2', '\x2', 
		'=', '>', '\x5', '\x5', '\x3', '\x2', '>', '?', '\x5', '\a', '\x4', '\x2', 
		'?', '\x12', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '*', '\x2', 
		'\x2', '\x41', '\x14', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', 
		'+', '\x2', '\x2', '\x43', '\x16', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\a', '-', '\x2', '\x2', '\x45', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\a', '/', '\x2', '\x2', 'G', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\a', ',', '\x2', '\x2', 'I', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\a', '\x31', '\x2', '\x2', 'K', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'N', '\a', '/', '\x2', '\x2', 'M', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'Q', '\t', '\b', '\x2', '\x2', 'P', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', ' ', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\a', '.', '\x2', '\x2', 'U', '\"', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\x5', '\r', '\a', '\x2', 'W', 'X', '\x5', 
		'\x1F', '\x10', '\x2', 'X', '$', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', 
		'\x31', '\x33', '\x38', 'M', 'R', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
